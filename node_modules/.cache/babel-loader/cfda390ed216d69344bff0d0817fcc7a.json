{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/FrontEnd/ColorfulTiles/src/pages/ColorfulTiles/GenerateForm/GenerateHistory.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { generate_tiles2 } from '../../../redux/actions/getColorActions';\nimport { saveColor, nameColor, displayColor } from '../../../redux/actions/saveColorActions';\nimport { getDataFromLocalStorage, saveDataToLocalStorage } from '../../../utils/common';\nimport { Link } from 'react-router-dom';\n\nclass GenerateHistory extends Component {\n  constructor() {\n    super();\n\n    this.changeDisplay = () => {\n      const _this$props = this.props,\n            item = _this$props.item,\n            name = _this$props.name,\n            idx = _this$props.idx,\n            savecolors = _this$props.savecolors,\n            namecolors = _this$props.namecolors,\n            displaycolors = _this$props.displaycolors,\n            displayColor = _this$props.displayColor;\n      const display = this.state.display;\n\n      if (displaycolors[display] === 0) {\n        displaycolors[display] = 1;\n      } else {\n        displaycolors[display] = 0;\n      }\n\n      ;\n      displayColor(displaycolors);\n    };\n\n    this.state = {\n      row: 0,\n      column: 0,\n      data: '',\n      display: [],\n      nameinput: '' //savecolors: getDataFromLocalStorage('colortile'),\n      //namecolors: getDataFromLocalStorage('colorname')\n\n    };\n  } // deleteTile=()=>{\n  //     const {savecolors,namecolors,saveColor,nameColor}=this.props;\n  //     const {item,name}=this.props;\n  //     const colortileUpdate=savecolors.filter((data)=>JSON.stringify(data)!==JSON.stringify(item));\n  //     const nameUpdate=namecolors.filter((data)=>JSON.stringify(data)!==JSON.stringify(name));\n  //     // const a=[1,2,3,4,5];\n  //     // const b=a.filter((data)=>data!==2);\n  //     // console.log('b',b);\n  //     saveColor(colortileUpdate);\n  //     nameColor(nameUpdate);\n  // }\n\n\n  render() {\n    const _this$props2 = this.props,\n          item = _this$props2.item,\n          name = _this$props2.name,\n          idx = _this$props2.idx,\n          savecolors = _this$props2.savecolors,\n          namecolors = _this$props2.namecolors,\n          displaycolors = _this$props2.displaycolors,\n          displayColor = _this$props2.displayColor;\n    const display = this.state.display;\n    console.log(displaycolors);\n    return React.createElement(\"div\", {\n      className: \"generate_history\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, savecolors.map((item, idx) => React.createElement(\"div\", {\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      key: idx,\n      onClick: () => {\n        if (displaycolors[idx] === 0) {\n          displaycolors[idx] = 1;\n          displayColor(displaycolors);\n          this.setState({\n            display: displaycolors\n          });\n        } else {\n          displaycolors[idx] = 0;\n          displayColor(displaycolors);\n          displayColor(displaycolors);\n          this.setState({\n            display: displaycolors\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, namecolors[idx]), !!display[idx] && React.createElement(\"div\", {\n      className: \"history_item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => {\n        //const colortileUpdate=savecolors.filter((data)=>JSON.stringify(data)!==JSON.stringify(item));\n        //const nameUpdate=namecolors.filter((data)=>JSON.stringify(data)!==JSON.stringify(namecolors[idx]));\n        savecolors[idx] = '';\n        namecolors[idx] = '';\n        displaycolors[idx] = ''; //saveColor(colortileUpdate);\n        //nameColor(nameUpdate);\n\n        saveColor(savecolors);\n        nameColor(namecolors);\n        displayColor(displaycolors);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Delete\"), item.map((row, rowidx) => React.createElement(\"div\", {\n      key: rowidx,\n      className: \"tile-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, row.map((column, columnidx) => React.createElement(\"div\", {\n      className: \"tile\",\n      key: columnidx,\n      style: {\n        backgroundColor: column\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }))))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  getcolors: state.getcolor.data,\n  savecolors: state.saveColor.data,\n  namecolors: state.saveColor.name,\n  displaycolors: state.saveColor.display\n});\n\nexport default connect(mapStateToProps, {\n  saveColor,\n  nameColor,\n  displayColor,\n  generate_tiles2\n})(GenerateHistory);","map":{"version":3,"sources":["/Users/apple/Desktop/FrontEnd/ColorfulTiles/src/pages/ColorfulTiles/GenerateForm/GenerateHistory.jsx"],"names":["React","Component","connect","generate_tiles2","saveColor","nameColor","displayColor","getDataFromLocalStorage","saveDataToLocalStorage","Link","GenerateHistory","constructor","changeDisplay","props","item","name","idx","savecolors","namecolors","displaycolors","display","state","row","column","data","nameinput","render","console","log","map","setState","rowidx","columnidx","backgroundColor","mapStateToProps","getcolors","getcolor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { generate_tiles2 } from '../../../redux/actions/getColorActions';\nimport { saveColor, nameColor, displayColor } from '../../../redux/actions/saveColorActions';\nimport { getDataFromLocalStorage, saveDataToLocalStorage } from '../../../utils/common';\nimport { Link } from 'react-router-dom';\nclass GenerateHistory extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            row: 0,\n            column: 0,\n            data: '',\n            display: [],\n            nameinput: '',\n            //savecolors: getDataFromLocalStorage('colortile'),\n            //namecolors: getDataFromLocalStorage('colorname')\n        }\n    }\n\n    // deleteTile=()=>{\n    //     const {savecolors,namecolors,saveColor,nameColor}=this.props;\n    //     const {item,name}=this.props;\n    //     const colortileUpdate=savecolors.filter((data)=>JSON.stringify(data)!==JSON.stringify(item));\n    //     const nameUpdate=namecolors.filter((data)=>JSON.stringify(data)!==JSON.stringify(name));\n    //     // const a=[1,2,3,4,5];\n    //     // const b=a.filter((data)=>data!==2);\n    //     // console.log('b',b);\n    //     saveColor(colortileUpdate);\n    //     nameColor(nameUpdate);\n\n    // }\n    changeDisplay = () => {\n        const { item, name, idx, savecolors, namecolors, displaycolors, displayColor } = this.props;\n        const { display } = this.state;\n        if (displaycolors[display] === 0) {\n            displaycolors[display] = 1\n        } else { displaycolors[display] = 0 };\n        displayColor(displaycolors);\n    }\n    render() {\n        const { item, name, idx, savecolors, namecolors, displaycolors, displayColor } = this.props;\n        const { display } = this.state;\n        console.log(displaycolors);\n        return (\n            <div className=\"generate_history\">\n                {savecolors.map((item, idx) =>\n                    <div key={idx}>\n                        <button key={idx} onClick={() => {\n                            if (displaycolors[idx] === 0) {\n                                displaycolors[idx] = 1;\n                                displayColor(displaycolors);\n                                this.setState({ display: displaycolors })\n                            } else {\n                                displaycolors[idx] = 0;\n                                displayColor(displaycolors);\n                                displayColor(displaycolors);\n                                this.setState({ display: displaycolors });\n                            }\n                        }}>{namecolors[idx]}</button>\n                        {!!display[idx] && <div className=\"history_item\">\n                            <button onClick={()=>{\n                                //const colortileUpdate=savecolors.filter((data)=>JSON.stringify(data)!==JSON.stringify(item));\n                                //const nameUpdate=namecolors.filter((data)=>JSON.stringify(data)!==JSON.stringify(namecolors[idx]));\n                                savecolors[idx]='';\n                                namecolors[idx]='';\n                                displaycolors[idx]='';\n                                //saveColor(colortileUpdate);\n                                //nameColor(nameUpdate);\n                                saveColor(savecolors);\n                                nameColor(namecolors);\n                                displayColor(displaycolors);\n                            }}>Delete</button>\n                            {item.map((row, rowidx) =>\n                                <div key={rowidx} className=\"tile-row\">\n                                    {row.map((column, columnidx) =>\n                                        <div\n                                            className=\"tile\"\n                                            key={columnidx}\n                                            style={{ backgroundColor: column }}\n\n                                        />\n                                    )}\n\n                                </div>\n                            )}\n                        </div>\n                        }\n                    </div>\n                )}\n                {/* <button key={idx} onClick={this.changeDisplay}>{name}</button>   \n             {!!display && <div className=\"history_item\">\n                 <button onClick={this.deleteTile}>Delete</button>\n            {item.map((row, rowidx) =>\n              <div key={rowidx} className=\"tile-row\">\n                {row.map((column, columnidx) =>\n                  <div\n                    className=\"tile\"\n                    key={columnidx}\n                    style={{ backgroundColor: column }}\n\n                  />\n                )}\n              </div>\n            )}\n          </div>\n          } */}\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    getcolors: state.getcolor.data,\n    savecolors: state.saveColor.data,\n    namecolors: state.saveColor.name,\n    displaycolors: state.saveColor.display\n})\nexport default connect(mapStateToProps, { saveColor, nameColor, displayColor, generate_tiles2 })(GenerateHistory);"]},"metadata":{},"sourceType":"module"}